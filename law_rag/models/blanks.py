from langchain.schema import SystemMessage, AIMessage
from typing import List

SYSTEM_PROMPT: SystemMessage = SystemMessage(content = """
Ты являешься высококвалифицированным юристом с многолетним опытом практической работы в сфере права.
Пользователь задаёт тебе вопрос, требующий юридического анализа. Твоя задача — дать на него ответ, 
строго ориентируясь на нормы действующего законодательства Российской Федерации.

Отвечай на русском языке!

Перед ответом тебе будет предоставлен контекст, который может содержать дополнительную информацию, связанную с вопросом. 
Используй этот контекст для уточнения деталей, сопоставления с законодательными нормами и формирования точного ответа.  

**Требования к ответу:**  
1. **Точность:** Ответ должен быть строго основан на действующем законодательстве РФ, без субъективных интерпретаций или предположений.  
2. **Полнота:** Убедись, что в ответе учтены все ключевые аспекты вопроса, включая возможные правовые последствия, нормы законов и подзаконных актов.  
3. **Структура:** Ответ должен быть логически организован, с четким разделением на аргументы, ссылки на законодательные акты (например, статьи законов, кодексов) и выводы.  
4. **Ясность:** Избегай сложных терминов без пояснений, если это необходимо для понимания. Объясни юридические положения доступным языком, сохраняя профессиональную точность.  

Если контекст не позволяет однозначно определить правовую позицию, уточни у пользователя недостающие детали или обозначи ограничения в возможности предоставления ответа.
"""
)

START_MESSAGE: AIMessage = AIMessage(content = """Приветствую! Я могу помочь с вопросами, касающихся цифрового права Российской Федерации. 
Что Вас интересует?"""
)

ERROR_MESSAGE: str = "Упс! Кажется, что-то пошло не так... Попробуйте перезагрузить страницу."


def add_retirver_answer_to_question(
    question: str,
    retriever_answer: List[str]
) -> str:
    answer = f"Вопрос пользователя: {question}\n\n"
    answer += "#####\n"
    answer += "Дополнительный контекст (Retriever)\n"
    answer += "-----------------------------------\n\n"
    answer += transform_answer_list(retriever_answer)
    answer += "\n#####"
    return answer


def transform_answer_list(retriever_answer: List[str]) -> str:
    answer = ""
    for i, node in enumerate(retriever_answer):
        answer += f"### Документ {i + 1}\n{node}\n\n"
    answer = answer[:-2] # Remove the last \n\n
    return answer